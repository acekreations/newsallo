{"version":3,"sources":["App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["App","state","response","post","responseToPost","callApi","_callee","body","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","this","handleSubmit","_callee2","e","_context2","preventDefault","method","headers","Content-Type","JSON","stringify","_this","text","setState","_this2","then","res","express","catch","err","console","log","_this3","react_default","createElement","className","src","logo","alt","href","target","rel","onSubmit","type","value","onChange","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"qSA6EeA,oNAtEbC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,eAAgB,MASlBC,6BAAU,SAAAC,IAAA,IAAAJ,EAAAK,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACeC,MAAM,cADrB,cACFZ,EADES,EAAAI,KAAAJ,EAAAE,KAAA,EAEWX,EAASc,OAFpB,UAEFT,EAFEI,EAAAI,KAIgB,MAApBb,EAASe,OAJL,CAAAN,EAAAE,KAAA,cAI2BK,MAAMX,EAAKY,SAJtC,cAAAR,EAAAS,OAAA,SAMDb,GANC,wBAAAI,EAAAU,SAAAf,EAAAgB,WASVC,mDAAe,SAAAC,EAAMC,GAAN,IAAAvB,EAAAK,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cACbY,EAAEE,iBADWD,EAAAb,KAAA,EAEUC,MAAM,aAAc,CACzCc,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBvB,KAAMwB,KAAKC,UAAU,CAAE7B,KAAM8B,EAAKhC,MAAME,SAP7B,cAEPD,EAFOwB,EAAAX,KAAAW,EAAAb,KAAA,EASMX,EAASgC,OATf,OASP3B,EATOmB,EAAAX,KAWbkB,EAAKE,SAAS,CAAE/B,eAAgBG,IAXnB,wBAAAmB,EAAAL,SAAAG,EAAAF,kJAfK,IAAAc,EAAAd,KAClBA,KAAKjB,UACFgC,KAAK,SAAAC,GAAG,OAAIF,EAAKD,SAAS,CAAEjC,SAAUoC,EAAIC,YAC1CC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCA0BrB,IAAAG,EAAAtB,KACP,OACEuB,EAAApC,EAAAqC,cAAA,OAAKC,UAAU,OACbF,EAAApC,EAAAqC,cAAA,UAAQC,UAAU,cAChBF,EAAApC,EAAAqC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCL,EAAApC,EAAAqC,cAAA,iBACOD,EAAApC,EAAAqC,cAAA,0BADP,wBAGAD,EAAApC,EAAAqC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASFR,EAAApC,EAAAqC,cAAA,SAAIxB,KAAKrB,MAAMC,UACf2C,EAAApC,EAAAqC,cAAA,QAAMQ,SAAUhC,KAAKC,cACnBsB,EAAApC,EAAAqC,cAAA,SACED,EAAApC,EAAAqC,cAAA,kCAEFD,EAAApC,EAAAqC,cAAA,SACES,KAAK,OACLC,MAAOlC,KAAKrB,MAAME,KAClBsD,SAAU,SAAAhC,GAAC,OAAImB,EAAKT,SAAS,CAAEhC,KAAMsB,EAAE2B,OAAOI,WAEhDX,EAAApC,EAAAqC,cAAA,UAAQS,KAAK,UAAb,WAEFV,EAAApC,EAAAqC,cAAA,SAAIxB,KAAKrB,MAAMG,wBAjELsD,cCIZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT7B,KAAK,SAAAiC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvE,QACfkE,UAAUC,cAAcO,WAK1BjC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBH,MAAM,SAAAoC,GACLlC,QAAQkC,MAAM,4CAA6CA,KChEjEC,IAASC,OAAOjC,EAAApC,EAAAqC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMnB,EAAK,GAAAoB,OAAMH,GAAN,sBAEPxB,EAwCV,SAAiCO,GAE/BpD,MAAMoD,GACH7B,KAAK,SAAAnC,GAGkB,MAApBA,EAASe,SACuD,IAAhEf,EAAS2B,QAAQ0D,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMpD,KAAK,SAAAiC,GACjCA,EAAaoB,aAAarD,KAAK,WAC7BwB,OAAOC,SAAS6B,aAKpB1B,EAAgBC,KAGnB1B,MAAM,WACLE,QAAQC,IACN,mEA5DAiD,CAAwB1B,GAGxBD,EAAgBC,MChCxB2B,sBCPAC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a71f25e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n\n    this.setState({ responseToPost: body });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <p>{this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}